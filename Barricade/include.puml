@startuml
class Program {
    {static} <<async>> Main(args:string[]) : Task
}
Program --> "_gameController" GameController
abstract class Piece {
    # Name : string = ""
    + <<override>> ToString() : string
}
Piece --> "PieceField" Field
Piece --> "StartOutField" Field
class WoodField {
    + WoodField()
    + <<override>> ToString() : string
}
Field <|-- WoodField
class Village {
}
class "List`1"<T> {
}
Village o-> "Fields<Field>" "List`1"
abstract class Field {
    + {abstract} <<override>> ToString() : string
}
class "List`1"<T> {
}
Field o-> "Pieces<Piece>" "List`1"
Field --> "TempPiece" Piece
Field --> "LeftConnectedField" Field
Field --> "RightConnectedField" Field
Field --> "TopConnectedField" Field
Field --> "DownConnectedField" Field
class Player {
}
class "List`1"<T> {
}
Player o-> "StartFields<Field>" "List`1"
Player o-> "PlayerPieces<PlayerPiece>" "List`1"
Player --> "ActivePlayerPiece" PlayerPiece
class Die {
    + ThrowAmount : int
    + ArchivedThrowAmount : int
    + ThrowDie() : void
    + RemoveOneEye() : void
    + RevertThrownAmount() : void
}
class GameModel {
    - <<const>> AmountOfPlayers : int = 4
    - _playerTurnNumber : int
    + GameModel()
    + MoveBarriers() : void
    - MoveBarrier(barricadePiece:BarricadePiece) : void
    + GetActivePlayerName() : string
    - MoveAllowed(fieldFrom:Field, fieldTo:Field) : bool
    + MovePieceUp() : bool
    + MovePieceDown() : bool
    + MovePieceLeft() : bool
    + MovePieceRight() : bool
    - MovePiece(connectedField:Field) : bool
    - SetPieceActive(piece:Piece) : void
    - ResetPiece(piece:Piece) : void
    + MoveDone() : void
    - {static} MovePieceToNewField(piece:Piece, fieldTo:Field) : void
    - NextPlayer() : void
    + NextPiece() : void
    + GenerateBoardField(lines:string[]) : void
    - SeparateStartFields() : void
    - SetupPlayerField(item:char) : Field
    - AddBarricadeToField() : Field
    - CreateField(toString:char) : Field
    - GeneratePlayers() : void
}
class "List`1"<T> {
}
GameModel o-> "BarricadePieces<BarricadePiece>" "List`1"
GameModel o-> "_players<Player>" "List`1"
GameModel --> "_activePiece" Piece
GameModel --> "_activePlayer" Player
GameModel --> "WinningPlayer" Player
GameModel o-> "Die" Die
class StartField {
    + StartField()
    + <<override>> ToString() : string
}
Field <|-- StartField
class RestField {
    + RestField()
    + <<override>> ToString() : string
}
Field <|-- RestField
class PlayerPiece {
    + PlayerPiece(name:string)
}
class "List`1"<T> {
}
Piece <|-- PlayerPiece
PlayerPiece --> "StartField" StartField
PlayerPiece --> "PieceOwner" Player
PlayerPiece --> "TaggedFields<Field>" "List`1"
class BarricadePiece {
    + BarricadePiece(name:string)
}
Piece <|-- BarricadePiece
class FinishField {
    + <<override>> ToString() : string
}
Field <|-- FinishField
class NormalField {
    + NormalField()
    + <<override>> ToString() : string
}
Field <|-- NormalField
class GameView {
    + PrintCurrentGameState(lines:IEnumerable<string>) : void
    + PrintWinner(winner:string) : void
}
class GameController {
    + GameController(lines:string[])
    + RunGame() : void
    - ViewData() : string[]
    - {static} ToVerticalConnectionString(field:Field) : string
    - {static} ToSquareConnectionString(field:Field) : string
    - PieceMovement() : void
}
GameController --> "_gameView" GameView
GameController --> "_gameModel" GameModel
@enduml
